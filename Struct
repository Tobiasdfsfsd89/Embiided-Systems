/*
 * infrastructure.c
 *
 */
#include <stdio.h>
#include "class.h"

extern Task_Handle task1;
extern Task_Handle task2;
extern Task_Handle task3;
extern Semaphore_Handle semaphore0;
extern Semaphore_Handle semaphore1;
extern Semaphore_Handle semaphore2;
extern Semaphore_Handle semaphore3;
extern GateSwi_Handle gateSwi0;
extern GateSwi_Handle gateSwi1;
extern GateSwi_Handle gateSwi2;
extern GateSwi_Handle gateSwi3;
extern GateSwi_Handle gateSwi4;
extern GateSwi_Handle gateSwi5;
//extern Swi_Handle swi0;
extern Swi_Handle swi1;
extern Swi_Handle swi2;
extern Swi_Handle swi3;
extern Swi_Handle swi4;
extern Swi_Handle swi5;

void AddCallback(int32_t index, int32_t count, char *payload){
    CB[index].count = count;
    strcpy(CB[index].payload, payload);
}

int32_t AddPayload(char *payload){
    int32_t payloadnext;
    int32_t index;
    uint32_t gateKey;
    char response[BUFFER_SIZE];

    gateKey = GateSwi_enter(Bios.PayloadWriteGate);

    index = PayloadQ.payloadWriting;

    payloadnext = index + 1;
    if (payloadnext >= PAYLOAD_SIZE){
        payloadnext = 0;
    }

    if(payloadnext == PayloadQ.payloadReading){
        GateSwi_leave(Bios.PayloadWriteGate, gateKey);
        strcpy(response, "Queue Buffer is full, discarding last inputed command/r/n");
        UARTWriteProtected(response);
        QOverflow++;
        return NULL; // error
    }
    else{
        strcpy(PayloadQ.payloads[index], payload);
        PayloadQ.payloadWriting = payloadnext;
    }
    GateSwi_leave(Bios.PayloadWriteGate, gateKey);
    Semaphore_post(Bios.PayloadSem);
    return index;
}

void AddScript(int32_t index, char *input){
    strcpy(scripts[index], input);
}

void appendStr(char *input, char c)
{
    int len = strlen(input);
    if (len >= BUFFER_SIZE - 1){
        input[0] = '\0';
        char response[BUFFER_SIZE] = "\r\nMessage Size too Big\r\n";
        UARTWriteProtected(response);
        QOverflow++;
        return;
    }

    input[len] = c;
    input[len + 1] = '\0';
}

void AddTicker(int32_t index, int32_t delay, int32_t period, int32_t count, char *payload){
    tic[index].delay = delay;
    tic[index].period = period;
    tic[index].count = count;
    strcpy(tic[index].payload, payload);
    if(index == 0){
        Timer_start(Glo.timer0);
    }
}

void ClearAudioBuffer(){
    int32_t i;

    for (i = 0; i < DATABLOCK_SIZE; i++){
        adcBufCtrl.RX_Ping[i] = 0;
        adcBufCtrl.RX_Pong[i] = 0;

        txBufCtrl.ping[i] = 0;
        txBufCtrl.pong[i] = 0;
    }
}

void Driver_init(){
    GPIO_init();
    UART_init();
    Timer_init();
    SPI_init();
    ADCBuf_init();
    Global_init();



    GPIO_enableInt(CONFIG_GPIO_4);
    GPIO_enableInt(CONFIG_GPIO_5);

    /* Create a UART with data processing off. */
    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_BINARY;
    uartParams.readDataMode = UART_DATA_BINARY;
    uartParams.readReturnMode = UART_RETURN_FULL;
    uartParams.baudRate = 115200;

    Glo.uart0 = UART_open(CONFIG_UART_0, &uartParams);

    if (Glo.uart0 == NULL) {
        /* UART_open() failed */
        while (1);
    }

    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_BINARY;
    uartParams.readDataMode = UART_DATA_TEXT;
    uartParams.readReturnMode = UART_RETURN_NEWLINE;
    uartParams.baudRate = 115200;
    uartParams.readEcho = UART_ECHO_OFF;

    Glo.uart7 = UART_open(CONFIG_UART_1, &uartParams);

    if (Glo.uart7 == NULL) {
        /* UART_open() failed */
        while (1);
    }

    Timer_Params_init(&Timer0Params);
    Timer0Params.period = 1000000;
    Timer0Params.periodUnits = Timer_PERIOD_US;
    Timer0Params.timerCallback = Timer0Callback;
    Timer0Params.timerMode = Timer_CONTINUOUS_CALLBACK;

    Glo.timer0 = Timer_open(CONFIG_TIMER_0, &Timer0Params);

    if(Glo.timer0 == NULL){
        while (1);
    }
    if(Timer_start(Glo.timer0) == Timer_STATUS_ERROR){
        while (1);
    }


    Timer0Params.period = 10000;
    Timer0Params.periodUnits = Timer_PERIOD_US;
    Timer0Params.timerCallback = Timer1Callback;
    Timer0Params.timerMode = Timer_CONTINUOUS_CALLBACK;

    Glo.timer1 = Timer_open(CONFIG_TIMER_1, &Timer0Params);

    if(Glo.timer1 == NULL){
        while (1);
    }
    if(Timer_start(Glo.timer1) == Timer_STATUS_ERROR){
        while (1);
    }

    SPI_Params_init(&spiParams);
    spiParams.dataSize = 16;
    spiParams.frameFormat = SPI_POL0_PHA1;
    Glo.spi3 = SPI_open(CONFIG_SPI_0, &spiParams);

    if (Glo.spi3 == NULL){
        while(1);
    }

    ADCBuf_Params_init(&adcBufParams);

    adcBufParams.returnMode = ADCBuf_RETURN_MODE_CALLBACK;
    adcBufParams.recurrenceMode = ADCBuf_RECURRENCE_MODE_CONTINUOUS;

    adcBufParams.callbackFxn = adcBufCallback;
    adcBufParams.samplingFrequency = 8000;

    Glo.adcBuf = ADCBuf_open(CONFIG_ADCBUF_0, &adcBufParams);

    if (Glo.adcBuf == NULL){
        while(1);
    }
}

void Global_init(){
    int32_t i;

    Timer0Period = 1000000;
    Bios.UART0ReadTask = task1;
    Bios.PayloadTask = task2;
    Bios.UART7ReadTask = task3;
    Bios.PayloadSem = semaphore2;
    Bios.CallbackGate = gateSwi0;
    Bios.TickerGate = gateSwi1;
    Bios.PayloadWriteGate = gateSwi2;
    Bios.SW1SWI = swi1;
    Bios.SW2SWI = swi2;
    Bios.Timer0SWI = swi3;
    Bios.Timer1SWI = swi4;

    for(i=0; i < CALLBACK_SIZE; i++){
        CB[i].index = i;
        CB[i].count = 0;
        CB[i].HWI_flag = false;
        CB[i].payload[0] = 0;
    }

    for(i=0; i < TICKER_SIZE; i++){
            tic[i].index = i;
            tic[i].delay = 0;
            tic[i].period = 0;
            tic[i].count = 0;
            tic[i].payload[0] = 0;
        }

    for(i=1; i < REGISTER_SIZE; i++){
        reg[i] = reg[i-1] + 100;
    }

    LUTCtrl.lutDelta = 0;
    LUTCtrl.lutPosition = 0;
    SinLUT();

//    adcBufCtrl.conversion.adcChannel = ADCBUF_CHANNEL_0;
//    adcBufCtrl.conversion.arg = NULL;
//    adcBufCtrl.conversion.sampleBuffer = adcBufCtrl.RX_Ping;
//    adcBufCtrl.conversion.sampleBufferTwo = adcBufCtrl.RX_Pong;
//    adcBufCtrl.conversion.samplesRequestedCount = DATABLOCK_SIZE;
//    adcBufCtrl.converting = 0;
//    adcBufCtrl.RX_Completed = NULL;
//    adcBufCtrl.callback_count = 0;
//
//    txBufCtrl.completed = NULL;
//    txBufCtrl.index = -1;
//    txBufCtrl.delay = 0;
//
//    ClearAudioBuffer();

    //scripts
    strcpy(scripts[5], "-rem test for if statments");
    strcpy(scripts[6], "-if 10 > 12 ? -print t : -script 8 x");

    strcpy(scripts[8], "-reg 10 + 10 #100");
    strcpy(scripts[9], "-script 5 x");

    strcpy(scripts[17], "-rem toggles all LEDs");
    strcpy(scripts[18], "-gpio 0 t");
    strcpy(scripts[19], "-gpio 1 t");
    strcpy(scripts[20], "-gpio 2 t");
    strcpy(scripts[21], "-gpio 3 t");
}

